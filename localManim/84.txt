

TransformMatchingTex¶
Qualified name: \`\`\`manim.animation.transform\_matching\_parts.TransformMatchingTex\`\`\`


\`\`\`class\`\`\` \`\`\`TransformMatchingTex\`\`\`(\`\`\`mobject\`\`\`\`\`\`=\`\`\`\`\`\`None\`\`\`, \`\`\`*\`\`\`\`\`\`args\`\`\`, \`\`\`use_override\`\`\`\`\`\`=\`\`\`\`\`\`True\`\`\`, \`\`\`**\`\`\`\`\`\`kwargs\`\`\`)¶
Bases: \`\`\`TransformMatchingAbstractBase\`\`\`
A transformation trying to transform rendered LaTeX strings.
Two submobjects match if their \`\`\`tex_string\`\`\` matches.

See also
\`\`\`TransformMatchingAbstractBase\`\`\`

Examples

Example: MatchingEquationParts ¶
\`\`\`from manim import *

class MatchingEquationParts(Scene):
    def construct(self):
        variables = VGroup(MathTex("a"), MathTex("b"), MathTex("c")).arrange_submobjects().shift(UP)

        eq1 = MathTex("{{x}}^2", "+", "{{y}}^2", "=", "{{z}}^2")
        eq2 = MathTex("{{a}}^2", "+", "{{b}}^2", "=", "{{c}}^2")
        eq3 = MathTex("{{a}}^2", "=", "{{c}}^2", "-", "{{b}}^2")

        self.add(eq1)
        self.wait(0.5)
        self.play(TransformMatchingTex(Group(eq1, variables), eq2))
        self.wait(0.5)
        self.play(TransformMatchingTex(eq2, eq3))
        self.wait(0.5)\`\`\`


Methods



\`\`\`get_mobject_key\`\`\`


\`\`\`get_mobject_parts\`\`\`






Parameters:

mobject (Mobject)
target_mobject (Mobject)
transform_mismatches (bool)
fade_transform_mismatches (bool)
key_map (dict | None)





